#!/bin/bash

flag_preserve_deviceNames=0
flag_testMode=0
user_defined_sg=""
user_defined_az=""
user_defined_hv="use-scheduler"
instance_list=( )
flag_preserve_ip=1

usage() {
  echo "Usage: `basename $0` [-p][-s <target_sg_id>][-v] <instance-name>"
  echo -e "\n[Options]"
  echo "-a <id> : UUID of availability zone"
  echo "-s <id> : UUID of security group"
  echo "-d      : use dhcp for ip assignment (default is to migrate the IP/MAC)"
  echo "-h      : specify hypervisor to place the target instance on"
  echo "-p      : preserve drive names when attaching volumes"
  echo -e "-v      : validate openstack login to source and target clouds\n"
  exit 1
}


source globals

# process parameters
while [ $# -gt 0 ]; do
  case ${1} in
  --version)
    stdout "Version: ${pkg_version}"
    exit 0
    ;;
  -v)
    validate_openstack ${pkg_configfile}
    exit 0
    ;;
  -d)
    flag_preserve_ip=0
    ;;
  -h)
    if [ $# -lt 2 ]; then usage; fi
    user_defined_hv=${2}
    shift
    ;;
  -a)
    if [ $# -lt 2 ]; then usage; fi
    user_defined_az=${2}
    shift
    ;;
  -s)
    if [ $# -lt 2 ]; then usage; fi
    user_defined_sg=${2}
    shift
    ;;
  -p)
    flag_preserve_deviceNames=0
    ;;
  -t|--testMode)
    flag_testMode=1
    ;;
  --help)
    usage
    ;;
  *)
    break
    ;;
  esac
  shift
done
if [ $# -eq 0 ]; then usage; fi

# get instance list
idx=0
while [ $# -gt 0 ]; do
    if [ ! -r ${pkg_basedir}/configs/${1} ]; then
        # search configs for isntance name
        flag_flound=0
        for cfile in ${pkg_basedir}/configs/*; do
            cat ${cfile} | grep "^instance|${1}|" > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                instance_list[((idx++))]=${1}
                flag_flound=1
                break
            fi
        done
        if [ ${flag_flound} -eq 0 ]; then
            assert "${1}: configuration file not found, run 'pf9-discover <instance-name>'"
        fi
    else
        instance_list[((idx++))]=${1}
    fi
    shift
done

# perform single-instance migration
if [ ${#instance_list[@]} -eq 1 ]; then
    migrate ${instance_list[0]}
fi

# perform multi-instance discovery & migration
if [ ${#instance_list[@]} -gt 1 ]; then
    # run migration
    job_list=( )
    pid_idx=0
    for instance in "${instance_list[@]}"; do
        instance_log=/tmp/${instance}.$$.log
        rm -f ${instance_log} && touch ${instance_log}
        if [ $? -eq 0 ]; then
            migrate ${instance} > ${instance_log} 2>&1 &
            job_list[((pid_idx++))]="$!:${instance_log}"
        fi
    done

    # monitor discovery threads (process IDs contained in job_list)
    sleep 1
    ${pkg_basedir}/monitor-logs ${job_list[@]}
fi
# exit cleanly
exit 0
